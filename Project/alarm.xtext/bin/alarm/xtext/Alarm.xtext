// automatically generated by Xtext
grammar alarm.xtext.Alarm with org.eclipse.xtext.common.Terminals

import "http://www.example.org/alarm" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

App returns App:
	'create' 'App' name=EString 'which' 'start' 'with' initial=[State|EString] ':'
	'with' 'bricks' ':' bricks+=Brick (',' bricks+=Brick)* ';'
	'with' 'states' ':' states+=State ( "," states+=State)* ';' 
	('alarm' '{' alarm+=Alarm ( "," alarm+=Alarm)* '}' )?;

Brick returns Brick:
	(Sensor | Actuator) name=EString 'on' 'pin' pin=EInt;

Sensor returns Sensor:
	{Sensor} 'Sensor';

Actuator returns Actuator:
	{Actuator} 'Actuator';

Alarm returns Alarm:
	SimpleAlarm | DualCheckAlarm | StateBasedAlarm | MultiStateAlarm;


EString returns ecore::EString:
	STRING | ID;

State returns State:
	'State' name=EString
		'with' 'actions' ':' actions+=Action ( "," actions+=Action)* ';'
		transition=Transition;

EInt returns ecore::EInt:
	'-'? INT;


Action returns Action:
	'do' actuator=[Actuator|EString] '=' value=SIGNAL;

Transition returns Transition:
	'with' 'Transition' 'to' next=[State|EString] 'when' sensor=[Sensor|EString] '=' value=SIGNAL;

enum SIGNAL returns SIGNAL:
				HIGH = 'HIGH' | LOW = 'LOW';

SimpleAlarm returns SimpleAlarm:
	'SimpleAlarm'
	name=EString
	'{'
		'button' button=[Sensor|EString]
		'Led' Led=[Actuator|EString]
		'buzzer' buzzer=[Actuator|EString]
	'}';

DualCheckAlarm returns DualCheckAlarm:
	'DualCheckAlarm'
	name=EString
	'{'
		'button' button=[Sensor|EString]
		'buzzer' buzzer=[Actuator|EString]
		'button2' button2=[Sensor|EString]
	'}';

StateBasedAlarm returns StateBasedAlarm:
	'StateBasedAlarm'
	name=EString
	'{'
		'button' button=[Sensor|EString]
		'Led' Led=[Actuator|EString]
	'}';

MultiStateAlarm returns MultiStateAlarm:
	'MultiStateAlarm'
	name=EString
	'{'
		'button' button=[Sensor|EString]
		'buzzer' buzzer=[Actuator|EString]
		'Led' Led=[Actuator|EString]
	'}';
