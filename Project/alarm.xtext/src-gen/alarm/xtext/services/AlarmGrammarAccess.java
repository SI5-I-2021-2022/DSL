/*
 * generated by Xtext 2.25.0
 */
package alarm.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AlarmGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AppElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.App");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAppKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cWhichKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cStartKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cWithKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cInitialAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cInitialStateCrossReference_6_0 = (CrossReference)cInitialAssignment_6.eContents().get(0);
		private final RuleCall cInitialStateEStringParserRuleCall_6_0_1 = (RuleCall)cInitialStateCrossReference_6_0.eContents().get(1);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cWithKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cBricksKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cBricksAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cBricksBrickParserRuleCall_11_0 = (RuleCall)cBricksAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cCommaKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cBricksAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cBricksBrickParserRuleCall_12_1_0 = (RuleCall)cBricksAssignment_12_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cWithKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cStatesKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cColonKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cStatesAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cStatesStateParserRuleCall_17_0 = (RuleCall)cStatesAssignment_17.eContents().get(0);
		private final Group cGroup_18 = (Group)cGroup.eContents().get(18);
		private final Keyword cCommaKeyword_18_0 = (Keyword)cGroup_18.eContents().get(0);
		private final Assignment cStatesAssignment_18_1 = (Assignment)cGroup_18.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_18_1_0 = (RuleCall)cStatesAssignment_18_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Group cGroup_20 = (Group)cGroup.eContents().get(20);
		private final Keyword cAlarmKeyword_20_0 = (Keyword)cGroup_20.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_20_1 = (Keyword)cGroup_20.eContents().get(1);
		private final Assignment cAlarmAssignment_20_2 = (Assignment)cGroup_20.eContents().get(2);
		private final RuleCall cAlarmAlarmParserRuleCall_20_2_0 = (RuleCall)cAlarmAssignment_20_2.eContents().get(0);
		private final Group cGroup_20_3 = (Group)cGroup_20.eContents().get(3);
		private final Keyword cCommaKeyword_20_3_0 = (Keyword)cGroup_20_3.eContents().get(0);
		private final Assignment cAlarmAssignment_20_3_1 = (Assignment)cGroup_20_3.eContents().get(1);
		private final RuleCall cAlarmAlarmParserRuleCall_20_3_1_0 = (RuleCall)cAlarmAssignment_20_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_20_4 = (Keyword)cGroup_20.eContents().get(4);
		
		//App returns App:
		//    'create' 'App' name=EString 'which' 'start' 'with' initial=[State|EString] ':'
		//    'with' 'bricks' ':' bricks+=Brick (',' bricks+=Brick)* ';'
		//    'with' 'states' ':' states+=State ( "," states+=State)* ';'
		//    ('alarm' '{' alarm+=Alarm ( "," alarm+=Alarm)* '}' )?;
		@Override public ParserRule getRule() { return rule; }
		
		//'create' 'App' name=EString 'which' 'start' 'with' initial=[State|EString] ':'
		//'with' 'bricks' ':' bricks+=Brick (',' bricks+=Brick)* ';'
		//'with' 'states' ':' states+=State ( "," states+=State)* ';'
		//('alarm' '{' alarm+=Alarm ( "," alarm+=Alarm)* '}' )?
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'App'
		public Keyword getAppKeyword_1() { return cAppKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'which'
		public Keyword getWhichKeyword_3() { return cWhichKeyword_3; }
		
		//'start'
		public Keyword getStartKeyword_4() { return cStartKeyword_4; }
		
		//'with'
		public Keyword getWithKeyword_5() { return cWithKeyword_5; }
		
		//initial=[State|EString]
		public Assignment getInitialAssignment_6() { return cInitialAssignment_6; }
		
		//[State|EString]
		public CrossReference getInitialStateCrossReference_6_0() { return cInitialStateCrossReference_6_0; }
		
		//EString
		public RuleCall getInitialStateEStringParserRuleCall_6_0_1() { return cInitialStateEStringParserRuleCall_6_0_1; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//'with'
		public Keyword getWithKeyword_8() { return cWithKeyword_8; }
		
		//'bricks'
		public Keyword getBricksKeyword_9() { return cBricksKeyword_9; }
		
		//':'
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }
		
		//bricks+=Brick
		public Assignment getBricksAssignment_11() { return cBricksAssignment_11; }
		
		//Brick
		public RuleCall getBricksBrickParserRuleCall_11_0() { return cBricksBrickParserRuleCall_11_0; }
		
		//(',' bricks+=Brick)*
		public Group getGroup_12() { return cGroup_12; }
		
		//','
		public Keyword getCommaKeyword_12_0() { return cCommaKeyword_12_0; }
		
		//bricks+=Brick
		public Assignment getBricksAssignment_12_1() { return cBricksAssignment_12_1; }
		
		//Brick
		public RuleCall getBricksBrickParserRuleCall_12_1_0() { return cBricksBrickParserRuleCall_12_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_13() { return cSemicolonKeyword_13; }
		
		//'with'
		public Keyword getWithKeyword_14() { return cWithKeyword_14; }
		
		//'states'
		public Keyword getStatesKeyword_15() { return cStatesKeyword_15; }
		
		//':'
		public Keyword getColonKeyword_16() { return cColonKeyword_16; }
		
		//states+=State
		public Assignment getStatesAssignment_17() { return cStatesAssignment_17; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_17_0() { return cStatesStateParserRuleCall_17_0; }
		
		//( "," states+=State)*
		public Group getGroup_18() { return cGroup_18; }
		
		//","
		public Keyword getCommaKeyword_18_0() { return cCommaKeyword_18_0; }
		
		//states+=State
		public Assignment getStatesAssignment_18_1() { return cStatesAssignment_18_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_18_1_0() { return cStatesStateParserRuleCall_18_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_19() { return cSemicolonKeyword_19; }
		
		//('alarm' '{' alarm+=Alarm ( "," alarm+=Alarm)* '}' )?
		public Group getGroup_20() { return cGroup_20; }
		
		//'alarm'
		public Keyword getAlarmKeyword_20_0() { return cAlarmKeyword_20_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_20_1() { return cLeftCurlyBracketKeyword_20_1; }
		
		//alarm+=Alarm
		public Assignment getAlarmAssignment_20_2() { return cAlarmAssignment_20_2; }
		
		//Alarm
		public RuleCall getAlarmAlarmParserRuleCall_20_2_0() { return cAlarmAlarmParserRuleCall_20_2_0; }
		
		//( "," alarm+=Alarm)*
		public Group getGroup_20_3() { return cGroup_20_3; }
		
		//","
		public Keyword getCommaKeyword_20_3_0() { return cCommaKeyword_20_3_0; }
		
		//alarm+=Alarm
		public Assignment getAlarmAssignment_20_3_1() { return cAlarmAssignment_20_3_1; }
		
		//Alarm
		public RuleCall getAlarmAlarmParserRuleCall_20_3_1_0() { return cAlarmAlarmParserRuleCall_20_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_20_4() { return cRightCurlyBracketKeyword_20_4; }
	}
	public class BrickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.Brick");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSensorParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPinKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPinEIntParserRuleCall_4_0 = (RuleCall)cPinAssignment_4.eContents().get(0);
		
		//Brick returns Brick:
		//    (Sensor | Actuator) name=EString 'on' 'pin' pin=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//(Sensor | Actuator) name=EString 'on' 'pin' pin=EInt
		public Group getGroup() { return cGroup; }
		
		//(Sensor | Actuator)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0_0() { return cSensorParserRuleCall_0_0; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_0_1() { return cActuatorParserRuleCall_0_1; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//'pin'
		public Keyword getPinKeyword_3() { return cPinKeyword_3; }
		
		//pin=EInt
		public Assignment getPinAssignment_4() { return cPinAssignment_4; }
		
		//EInt
		public RuleCall getPinEIntParserRuleCall_4_0() { return cPinEIntParserRuleCall_4_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Sensor returns Sensor:
		//    {Sensor} 'Sensor';
		@Override public ParserRule getRule() { return rule; }
		
		//{Sensor} 'Sensor'
		public Group getGroup() { return cGroup; }
		
		//{Sensor}
		public Action getSensorAction_0() { return cSensorAction_0; }
		
		//'Sensor'
		public Keyword getSensorKeyword_1() { return cSensorKeyword_1; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActuatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActuatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Actuator returns Actuator:
		//    {Actuator} 'Actuator';
		@Override public ParserRule getRule() { return rule; }
		
		//{Actuator} 'Actuator'
		public Group getGroup() { return cGroup; }
		
		//{Actuator}
		public Action getActuatorAction_0() { return cActuatorAction_0; }
		
		//'Actuator'
		public Keyword getActuatorKeyword_1() { return cActuatorKeyword_1; }
	}
	public class AlarmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.Alarm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleAlarmParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDualCheckAlarmParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStateBasedAlarmParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMultiStateAlarmParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Alarm returns Alarm:
		//    SimpleAlarm | DualCheckAlarm | StateBasedAlarm | MultiStateAlarm;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleAlarm | DualCheckAlarm | StateBasedAlarm | MultiStateAlarm
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleAlarm
		public RuleCall getSimpleAlarmParserRuleCall_0() { return cSimpleAlarmParserRuleCall_0; }
		
		//DualCheckAlarm
		public RuleCall getDualCheckAlarmParserRuleCall_1() { return cDualCheckAlarmParserRuleCall_1; }
		
		//StateBasedAlarm
		public RuleCall getStateBasedAlarmParserRuleCall_2() { return cStateBasedAlarmParserRuleCall_2; }
		
		//MultiStateAlarm
		public RuleCall getMultiStateAlarmParserRuleCall_3() { return cMultiStateAlarmParserRuleCall_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cActionsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsActionParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cActionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_6_1_0 = (RuleCall)cActionsAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTransitionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTransitionTransitionParserRuleCall_8_0 = (RuleCall)cTransitionAssignment_8.eContents().get(0);
		
		//State returns State:
		//    'State' name=EString
		//        'with' 'actions' ':' actions+=Action ( "," actions+=Action)* ';'
		//        transition=Transition;
		@Override public ParserRule getRule() { return rule; }
		
		//'State' name=EString
		//    'with' 'actions' ':' actions+=Action ( "," actions+=Action)* ';'
		//    transition=Transition
		public Group getGroup() { return cGroup; }
		
		//'State'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'with'
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//'actions'
		public Keyword getActionsKeyword_3() { return cActionsKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//actions+=Action
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_0() { return cActionsActionParserRuleCall_5_0; }
		
		//( "," actions+=Action)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_6_1() { return cActionsAssignment_6_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_6_1_0() { return cActionsActionParserRuleCall_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//transition=Transition
		public Assignment getTransitionAssignment_8() { return cTransitionAssignment_8; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_8_0() { return cTransitionTransitionParserRuleCall_8_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActuatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cActuatorActuatorCrossReference_1_0 = (CrossReference)cActuatorAssignment_1.eContents().get(0);
		private final RuleCall cActuatorActuatorEStringParserRuleCall_1_0_1 = (RuleCall)cActuatorActuatorCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSIGNALEnumRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Action returns Action:
		//    'do' actuator=[Actuator|EString] '=' value=SIGNAL;
		@Override public ParserRule getRule() { return rule; }
		
		//'do' actuator=[Actuator|EString] '=' value=SIGNAL
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//actuator=[Actuator|EString]
		public Assignment getActuatorAssignment_1() { return cActuatorAssignment_1; }
		
		//[Actuator|EString]
		public CrossReference getActuatorActuatorCrossReference_1_0() { return cActuatorActuatorCrossReference_1_0; }
		
		//EString
		public RuleCall getActuatorActuatorEStringParserRuleCall_1_0_1() { return cActuatorActuatorEStringParserRuleCall_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=SIGNAL
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//SIGNAL
		public RuleCall getValueSIGNALEnumRuleCall_3_0() { return cValueSIGNALEnumRuleCall_3_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTransitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNextStateCrossReference_3_0 = (CrossReference)cNextAssignment_3.eContents().get(0);
		private final RuleCall cNextStateEStringParserRuleCall_3_0_1 = (RuleCall)cNextStateCrossReference_3_0.eContents().get(1);
		private final Keyword cWhenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSensorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSensorSensorCrossReference_5_0 = (CrossReference)cSensorAssignment_5.eContents().get(0);
		private final RuleCall cSensorSensorEStringParserRuleCall_5_0_1 = (RuleCall)cSensorSensorCrossReference_5_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValueSIGNALEnumRuleCall_7_0 = (RuleCall)cValueAssignment_7.eContents().get(0);
		
		//Transition returns Transition:
		//    'with' 'Transition' 'to' next=[State|EString] 'when' sensor=[Sensor|EString] '=' value=SIGNAL;
		@Override public ParserRule getRule() { return rule; }
		
		//'with' 'Transition' 'to' next=[State|EString] 'when' sensor=[Sensor|EString] '=' value=SIGNAL
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//'Transition'
		public Keyword getTransitionKeyword_1() { return cTransitionKeyword_1; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//next=[State|EString]
		public Assignment getNextAssignment_3() { return cNextAssignment_3; }
		
		//[State|EString]
		public CrossReference getNextStateCrossReference_3_0() { return cNextStateCrossReference_3_0; }
		
		//EString
		public RuleCall getNextStateEStringParserRuleCall_3_0_1() { return cNextStateEStringParserRuleCall_3_0_1; }
		
		//'when'
		public Keyword getWhenKeyword_4() { return cWhenKeyword_4; }
		
		//sensor=[Sensor|EString]
		public Assignment getSensorAssignment_5() { return cSensorAssignment_5; }
		
		//[Sensor|EString]
		public CrossReference getSensorSensorCrossReference_5_0() { return cSensorSensorCrossReference_5_0; }
		
		//EString
		public RuleCall getSensorSensorEStringParserRuleCall_5_0_1() { return cSensorSensorEStringParserRuleCall_5_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }
		
		//value=SIGNAL
		public Assignment getValueAssignment_7() { return cValueAssignment_7; }
		
		//SIGNAL
		public RuleCall getValueSIGNALEnumRuleCall_7_0() { return cValueSIGNALEnumRuleCall_7_0; }
	}
	public class SimpleAlarmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.SimpleAlarm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSimpleAlarmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cButtonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cButtonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cButtonSensorCrossReference_4_0 = (CrossReference)cButtonAssignment_4.eContents().get(0);
		private final RuleCall cButtonSensorEStringParserRuleCall_4_0_1 = (RuleCall)cButtonSensorCrossReference_4_0.eContents().get(1);
		private final Keyword cLedKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLedAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cLedActuatorCrossReference_6_0 = (CrossReference)cLedAssignment_6.eContents().get(0);
		private final RuleCall cLedActuatorEStringParserRuleCall_6_0_1 = (RuleCall)cLedActuatorCrossReference_6_0.eContents().get(1);
		private final Keyword cBuzzerKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBuzzerAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cBuzzerActuatorCrossReference_8_0 = (CrossReference)cBuzzerAssignment_8.eContents().get(0);
		private final RuleCall cBuzzerActuatorEStringParserRuleCall_8_0_1 = (RuleCall)cBuzzerActuatorCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//SimpleAlarm returns SimpleAlarm:
		//    'SimpleAlarm'
		//    name=EString
		//    '{'
		//        'button' button=[Sensor|EString]
		//        'Led' Led=[Actuator|EString]
		//        'buzzer' buzzer=[Actuator|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SimpleAlarm'
		//name=EString
		//'{'
		//    'button' button=[Sensor|EString]
		//    'Led' Led=[Actuator|EString]
		//    'buzzer' buzzer=[Actuator|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'SimpleAlarm'
		public Keyword getSimpleAlarmKeyword_0() { return cSimpleAlarmKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'button'
		public Keyword getButtonKeyword_3() { return cButtonKeyword_3; }
		
		//button=[Sensor|EString]
		public Assignment getButtonAssignment_4() { return cButtonAssignment_4; }
		
		//[Sensor|EString]
		public CrossReference getButtonSensorCrossReference_4_0() { return cButtonSensorCrossReference_4_0; }
		
		//EString
		public RuleCall getButtonSensorEStringParserRuleCall_4_0_1() { return cButtonSensorEStringParserRuleCall_4_0_1; }
		
		//'Led'
		public Keyword getLedKeyword_5() { return cLedKeyword_5; }
		
		//Led=[Actuator|EString]
		public Assignment getLedAssignment_6() { return cLedAssignment_6; }
		
		//[Actuator|EString]
		public CrossReference getLedActuatorCrossReference_6_0() { return cLedActuatorCrossReference_6_0; }
		
		//EString
		public RuleCall getLedActuatorEStringParserRuleCall_6_0_1() { return cLedActuatorEStringParserRuleCall_6_0_1; }
		
		//'buzzer'
		public Keyword getBuzzerKeyword_7() { return cBuzzerKeyword_7; }
		
		//buzzer=[Actuator|EString]
		public Assignment getBuzzerAssignment_8() { return cBuzzerAssignment_8; }
		
		//[Actuator|EString]
		public CrossReference getBuzzerActuatorCrossReference_8_0() { return cBuzzerActuatorCrossReference_8_0; }
		
		//EString
		public RuleCall getBuzzerActuatorEStringParserRuleCall_8_0_1() { return cBuzzerActuatorEStringParserRuleCall_8_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DualCheckAlarmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.DualCheckAlarm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDualCheckAlarmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cButtonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cButtonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cButtonSensorCrossReference_4_0 = (CrossReference)cButtonAssignment_4.eContents().get(0);
		private final RuleCall cButtonSensorEStringParserRuleCall_4_0_1 = (RuleCall)cButtonSensorCrossReference_4_0.eContents().get(1);
		private final Keyword cBuzzerKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBuzzerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cBuzzerActuatorCrossReference_6_0 = (CrossReference)cBuzzerAssignment_6.eContents().get(0);
		private final RuleCall cBuzzerActuatorEStringParserRuleCall_6_0_1 = (RuleCall)cBuzzerActuatorCrossReference_6_0.eContents().get(1);
		private final Keyword cButton2Keyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cButton2Assignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cButton2SensorCrossReference_8_0 = (CrossReference)cButton2Assignment_8.eContents().get(0);
		private final RuleCall cButton2SensorEStringParserRuleCall_8_0_1 = (RuleCall)cButton2SensorCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DualCheckAlarm returns DualCheckAlarm:
		//    'DualCheckAlarm'
		//    name=EString
		//    '{'
		//        'button' button=[Sensor|EString]
		//        'buzzer' buzzer=[Actuator|EString]
		//        'button2' button2=[Sensor|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'DualCheckAlarm'
		//name=EString
		//'{'
		//    'button' button=[Sensor|EString]
		//    'buzzer' buzzer=[Actuator|EString]
		//    'button2' button2=[Sensor|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'DualCheckAlarm'
		public Keyword getDualCheckAlarmKeyword_0() { return cDualCheckAlarmKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'button'
		public Keyword getButtonKeyword_3() { return cButtonKeyword_3; }
		
		//button=[Sensor|EString]
		public Assignment getButtonAssignment_4() { return cButtonAssignment_4; }
		
		//[Sensor|EString]
		public CrossReference getButtonSensorCrossReference_4_0() { return cButtonSensorCrossReference_4_0; }
		
		//EString
		public RuleCall getButtonSensorEStringParserRuleCall_4_0_1() { return cButtonSensorEStringParserRuleCall_4_0_1; }
		
		//'buzzer'
		public Keyword getBuzzerKeyword_5() { return cBuzzerKeyword_5; }
		
		//buzzer=[Actuator|EString]
		public Assignment getBuzzerAssignment_6() { return cBuzzerAssignment_6; }
		
		//[Actuator|EString]
		public CrossReference getBuzzerActuatorCrossReference_6_0() { return cBuzzerActuatorCrossReference_6_0; }
		
		//EString
		public RuleCall getBuzzerActuatorEStringParserRuleCall_6_0_1() { return cBuzzerActuatorEStringParserRuleCall_6_0_1; }
		
		//'button2'
		public Keyword getButton2Keyword_7() { return cButton2Keyword_7; }
		
		//button2=[Sensor|EString]
		public Assignment getButton2Assignment_8() { return cButton2Assignment_8; }
		
		//[Sensor|EString]
		public CrossReference getButton2SensorCrossReference_8_0() { return cButton2SensorCrossReference_8_0; }
		
		//EString
		public RuleCall getButton2SensorEStringParserRuleCall_8_0_1() { return cButton2SensorEStringParserRuleCall_8_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class StateBasedAlarmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.StateBasedAlarm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateBasedAlarmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cButtonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cButtonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cButtonSensorCrossReference_4_0 = (CrossReference)cButtonAssignment_4.eContents().get(0);
		private final RuleCall cButtonSensorEStringParserRuleCall_4_0_1 = (RuleCall)cButtonSensorCrossReference_4_0.eContents().get(1);
		private final Keyword cLedKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLedAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cLedActuatorCrossReference_6_0 = (CrossReference)cLedAssignment_6.eContents().get(0);
		private final RuleCall cLedActuatorEStringParserRuleCall_6_0_1 = (RuleCall)cLedActuatorCrossReference_6_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//StateBasedAlarm returns StateBasedAlarm:
		//    'StateBasedAlarm'
		//    name=EString
		//    '{'
		//        'button' button=[Sensor|EString]
		//        'Led' Led=[Actuator|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'StateBasedAlarm'
		//name=EString
		//'{'
		//    'button' button=[Sensor|EString]
		//    'Led' Led=[Actuator|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'StateBasedAlarm'
		public Keyword getStateBasedAlarmKeyword_0() { return cStateBasedAlarmKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'button'
		public Keyword getButtonKeyword_3() { return cButtonKeyword_3; }
		
		//button=[Sensor|EString]
		public Assignment getButtonAssignment_4() { return cButtonAssignment_4; }
		
		//[Sensor|EString]
		public CrossReference getButtonSensorCrossReference_4_0() { return cButtonSensorCrossReference_4_0; }
		
		//EString
		public RuleCall getButtonSensorEStringParserRuleCall_4_0_1() { return cButtonSensorEStringParserRuleCall_4_0_1; }
		
		//'Led'
		public Keyword getLedKeyword_5() { return cLedKeyword_5; }
		
		//Led=[Actuator|EString]
		public Assignment getLedAssignment_6() { return cLedAssignment_6; }
		
		//[Actuator|EString]
		public CrossReference getLedActuatorCrossReference_6_0() { return cLedActuatorCrossReference_6_0; }
		
		//EString
		public RuleCall getLedActuatorEStringParserRuleCall_6_0_1() { return cLedActuatorEStringParserRuleCall_6_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class MultiStateAlarmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.MultiStateAlarm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMultiStateAlarmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cButtonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cButtonAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cButtonSensorCrossReference_4_0 = (CrossReference)cButtonAssignment_4.eContents().get(0);
		private final RuleCall cButtonSensorEStringParserRuleCall_4_0_1 = (RuleCall)cButtonSensorCrossReference_4_0.eContents().get(1);
		private final Keyword cBuzzerKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBuzzerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cBuzzerActuatorCrossReference_6_0 = (CrossReference)cBuzzerAssignment_6.eContents().get(0);
		private final RuleCall cBuzzerActuatorEStringParserRuleCall_6_0_1 = (RuleCall)cBuzzerActuatorCrossReference_6_0.eContents().get(1);
		private final Keyword cLedKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLedAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cLedActuatorCrossReference_8_0 = (CrossReference)cLedAssignment_8.eContents().get(0);
		private final RuleCall cLedActuatorEStringParserRuleCall_8_0_1 = (RuleCall)cLedActuatorCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//MultiStateAlarm returns MultiStateAlarm:
		//    'MultiStateAlarm'
		//    name=EString
		//    '{'
		//        'button' button=[Sensor|EString]
		//        'buzzer' buzzer=[Actuator|EString]
		//        'Led' Led=[Actuator|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MultiStateAlarm'
		//name=EString
		//'{'
		//    'button' button=[Sensor|EString]
		//    'buzzer' buzzer=[Actuator|EString]
		//    'Led' Led=[Actuator|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'MultiStateAlarm'
		public Keyword getMultiStateAlarmKeyword_0() { return cMultiStateAlarmKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'button'
		public Keyword getButtonKeyword_3() { return cButtonKeyword_3; }
		
		//button=[Sensor|EString]
		public Assignment getButtonAssignment_4() { return cButtonAssignment_4; }
		
		//[Sensor|EString]
		public CrossReference getButtonSensorCrossReference_4_0() { return cButtonSensorCrossReference_4_0; }
		
		//EString
		public RuleCall getButtonSensorEStringParserRuleCall_4_0_1() { return cButtonSensorEStringParserRuleCall_4_0_1; }
		
		//'buzzer'
		public Keyword getBuzzerKeyword_5() { return cBuzzerKeyword_5; }
		
		//buzzer=[Actuator|EString]
		public Assignment getBuzzerAssignment_6() { return cBuzzerAssignment_6; }
		
		//[Actuator|EString]
		public CrossReference getBuzzerActuatorCrossReference_6_0() { return cBuzzerActuatorCrossReference_6_0; }
		
		//EString
		public RuleCall getBuzzerActuatorEStringParserRuleCall_6_0_1() { return cBuzzerActuatorEStringParserRuleCall_6_0_1; }
		
		//'Led'
		public Keyword getLedKeyword_7() { return cLedKeyword_7; }
		
		//Led=[Actuator|EString]
		public Assignment getLedAssignment_8() { return cLedAssignment_8; }
		
		//[Actuator|EString]
		public CrossReference getLedActuatorCrossReference_8_0() { return cLedActuatorCrossReference_8_0; }
		
		//EString
		public RuleCall getLedActuatorEStringParserRuleCall_8_0_1() { return cLedActuatorEStringParserRuleCall_8_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	
	public class SIGNALElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "alarm.xtext.Alarm.SIGNAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHIGHHIGHKeyword_0_0 = (Keyword)cHIGHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOWLOWKeyword_1_0 = (Keyword)cLOWEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SIGNAL returns SIGNAL:
		//                HIGH = 'HIGH' | LOW = 'LOW';
		public EnumRule getRule() { return rule; }
		
		//HIGH = 'HIGH' | LOW = 'LOW'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HIGH = 'HIGH'
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_0() { return cHIGHEnumLiteralDeclaration_0; }
		
		//'HIGH'
		public Keyword getHIGHHIGHKeyword_0_0() { return cHIGHHIGHKeyword_0_0; }
		
		//LOW = 'LOW'
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_1() { return cLOWEnumLiteralDeclaration_1; }
		
		//'LOW'
		public Keyword getLOWLOWKeyword_1_0() { return cLOWLOWKeyword_1_0; }
	}
	
	private final AppElements pApp;
	private final BrickElements pBrick;
	private final SensorElements pSensor;
	private final ActuatorElements pActuator;
	private final AlarmElements pAlarm;
	private final EStringElements pEString;
	private final StateElements pState;
	private final EIntElements pEInt;
	private final ActionElements pAction;
	private final TransitionElements pTransition;
	private final SIGNALElements eSIGNAL;
	private final SimpleAlarmElements pSimpleAlarm;
	private final DualCheckAlarmElements pDualCheckAlarm;
	private final StateBasedAlarmElements pStateBasedAlarm;
	private final MultiStateAlarmElements pMultiStateAlarm;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AlarmGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pApp = new AppElements();
		this.pBrick = new BrickElements();
		this.pSensor = new SensorElements();
		this.pActuator = new ActuatorElements();
		this.pAlarm = new AlarmElements();
		this.pEString = new EStringElements();
		this.pState = new StateElements();
		this.pEInt = new EIntElements();
		this.pAction = new ActionElements();
		this.pTransition = new TransitionElements();
		this.eSIGNAL = new SIGNALElements();
		this.pSimpleAlarm = new SimpleAlarmElements();
		this.pDualCheckAlarm = new DualCheckAlarmElements();
		this.pStateBasedAlarm = new StateBasedAlarmElements();
		this.pMultiStateAlarm = new MultiStateAlarmElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("alarm.xtext.Alarm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//App returns App:
	//    'create' 'App' name=EString 'which' 'start' 'with' initial=[State|EString] ':'
	//    'with' 'bricks' ':' bricks+=Brick (',' bricks+=Brick)* ';'
	//    'with' 'states' ':' states+=State ( "," states+=State)* ';'
	//    ('alarm' '{' alarm+=Alarm ( "," alarm+=Alarm)* '}' )?;
	public AppElements getAppAccess() {
		return pApp;
	}
	
	public ParserRule getAppRule() {
		return getAppAccess().getRule();
	}
	
	//Brick returns Brick:
	//    (Sensor | Actuator) name=EString 'on' 'pin' pin=EInt;
	public BrickElements getBrickAccess() {
		return pBrick;
	}
	
	public ParserRule getBrickRule() {
		return getBrickAccess().getRule();
	}
	
	//Sensor returns Sensor:
	//    {Sensor} 'Sensor';
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Actuator returns Actuator:
	//    {Actuator} 'Actuator';
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//Alarm returns Alarm:
	//    SimpleAlarm | DualCheckAlarm | StateBasedAlarm | MultiStateAlarm;
	public AlarmElements getAlarmAccess() {
		return pAlarm;
	}
	
	public ParserRule getAlarmRule() {
		return getAlarmAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//State returns State:
	//    'State' name=EString
	//        'with' 'actions' ':' actions+=Action ( "," actions+=Action)* ';'
	//        transition=Transition;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Action returns Action:
	//    'do' actuator=[Actuator|EString] '=' value=SIGNAL;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Transition returns Transition:
	//    'with' 'Transition' 'to' next=[State|EString] 'when' sensor=[Sensor|EString] '=' value=SIGNAL;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//enum SIGNAL returns SIGNAL:
	//                HIGH = 'HIGH' | LOW = 'LOW';
	public SIGNALElements getSIGNALAccess() {
		return eSIGNAL;
	}
	
	public EnumRule getSIGNALRule() {
		return getSIGNALAccess().getRule();
	}
	
	//SimpleAlarm returns SimpleAlarm:
	//    'SimpleAlarm'
	//    name=EString
	//    '{'
	//        'button' button=[Sensor|EString]
	//        'Led' Led=[Actuator|EString]
	//        'buzzer' buzzer=[Actuator|EString]
	//    '}';
	public SimpleAlarmElements getSimpleAlarmAccess() {
		return pSimpleAlarm;
	}
	
	public ParserRule getSimpleAlarmRule() {
		return getSimpleAlarmAccess().getRule();
	}
	
	//DualCheckAlarm returns DualCheckAlarm:
	//    'DualCheckAlarm'
	//    name=EString
	//    '{'
	//        'button' button=[Sensor|EString]
	//        'buzzer' buzzer=[Actuator|EString]
	//        'button2' button2=[Sensor|EString]
	//    '}';
	public DualCheckAlarmElements getDualCheckAlarmAccess() {
		return pDualCheckAlarm;
	}
	
	public ParserRule getDualCheckAlarmRule() {
		return getDualCheckAlarmAccess().getRule();
	}
	
	//StateBasedAlarm returns StateBasedAlarm:
	//    'StateBasedAlarm'
	//    name=EString
	//    '{'
	//        'button' button=[Sensor|EString]
	//        'Led' Led=[Actuator|EString]
	//    '}';
	public StateBasedAlarmElements getStateBasedAlarmAccess() {
		return pStateBasedAlarm;
	}
	
	public ParserRule getStateBasedAlarmRule() {
		return getStateBasedAlarmAccess().getRule();
	}
	
	//MultiStateAlarm returns MultiStateAlarm:
	//    'MultiStateAlarm'
	//    name=EString
	//    '{'
	//        'button' button=[Sensor|EString]
	//        'buzzer' buzzer=[Actuator|EString]
	//        'Led' Led=[Actuator|EString]
	//    '}';
	public MultiStateAlarmElements getMultiStateAlarmAccess() {
		return pMultiStateAlarm;
	}
	
	public ParserRule getMultiStateAlarmRule() {
		return getMultiStateAlarmAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
