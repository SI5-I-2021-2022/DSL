/*
 * generated by Xtext 2.25.0
 */
package alarm.xtext.serializer;

import alarm.Actuator;
import alarm.App;
import alarm.DualCheckAlarm;
import alarm.MultiStateAlarm;
import alarm.Sensor;
import alarm.SimpleAlarm;
import alarm.State;
import alarm.StateBasedAlarm;
import alarm.Transition;
import alarm.alarmPackage;
import alarm.xtext.services.AlarmGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AlarmSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AlarmGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == alarmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case alarmPackage.ACTION:
				sequence_Action(context, (alarm.Action) semanticObject); 
				return; 
			case alarmPackage.ACTUATOR:
				sequence_Actuator(context, (Actuator) semanticObject); 
				return; 
			case alarmPackage.APP:
				sequence_App(context, (App) semanticObject); 
				return; 
			case alarmPackage.DUAL_CHECK_ALARM:
				sequence_DualCheckAlarm(context, (DualCheckAlarm) semanticObject); 
				return; 
			case alarmPackage.MULTI_STATE_ALARM:
				sequence_MultiStateAlarm(context, (MultiStateAlarm) semanticObject); 
				return; 
			case alarmPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case alarmPackage.SIMPLE_ALARM:
				sequence_SimpleAlarm(context, (SimpleAlarm) semanticObject); 
				return; 
			case alarmPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case alarmPackage.STATE_BASED_ALARM:
				sequence_StateBasedAlarm(context, (StateBasedAlarm) semanticObject); 
				return; 
			case alarmPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (value=SIGNAL? actuator=[Actuator|EString])
	 */
	protected void sequence_Action(ISerializationContext context, alarm.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Brick returns Actuator
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     (name=EString pin=EInt?)
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     App returns App
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         initial=[State|EString] 
	 *         bricks+=Brick 
	 *         bricks+=Brick* 
	 *         states+=State 
	 *         states+=State* 
	 *         (alarm+=Alarm alarm+=Alarm*)?
	 *     )
	 */
	protected void sequence_App(ISerializationContext context, App semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Alarm returns DualCheckAlarm
	 *     DualCheckAlarm returns DualCheckAlarm
	 *
	 * Constraint:
	 *     (name=EString button=[Sensor|EString] buzzer=[Actuator|EString] button2=[Sensor|EString])
	 */
	protected void sequence_DualCheckAlarm(ISerializationContext context, DualCheckAlarm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.ALARM__BUTTON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.ALARM__BUTTON));
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.BUZZER_ALARM__BUZZER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.BUZZER_ALARM__BUZZER));
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.DUAL_CHECK_ALARM__BUTTON2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.DUAL_CHECK_ALARM__BUTTON2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDualCheckAlarmAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDualCheckAlarmAccess().getButtonSensorEStringParserRuleCall_4_0_1(), semanticObject.eGet(alarmPackage.Literals.ALARM__BUTTON, false));
		feeder.accept(grammarAccess.getDualCheckAlarmAccess().getBuzzerActuatorEStringParserRuleCall_6_0_1(), semanticObject.eGet(alarmPackage.Literals.BUZZER_ALARM__BUZZER, false));
		feeder.accept(grammarAccess.getDualCheckAlarmAccess().getButton2SensorEStringParserRuleCall_8_0_1(), semanticObject.eGet(alarmPackage.Literals.DUAL_CHECK_ALARM__BUTTON2, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Alarm returns MultiStateAlarm
	 *     MultiStateAlarm returns MultiStateAlarm
	 *
	 * Constraint:
	 *     (name=EString button=[Sensor|EString] buzzer=[Actuator|EString] Led=[Actuator|EString])
	 */
	protected void sequence_MultiStateAlarm(ISerializationContext context, MultiStateAlarm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.ALARM__BUTTON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.ALARM__BUTTON));
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.BUZZER_ALARM__BUZZER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.BUZZER_ALARM__BUZZER));
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.LED_ALARM__LED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.LED_ALARM__LED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultiStateAlarmAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMultiStateAlarmAccess().getButtonSensorEStringParserRuleCall_4_0_1(), semanticObject.eGet(alarmPackage.Literals.ALARM__BUTTON, false));
		feeder.accept(grammarAccess.getMultiStateAlarmAccess().getBuzzerActuatorEStringParserRuleCall_6_0_1(), semanticObject.eGet(alarmPackage.Literals.BUZZER_ALARM__BUZZER, false));
		feeder.accept(grammarAccess.getMultiStateAlarmAccess().getLedActuatorEStringParserRuleCall_8_0_1(), semanticObject.eGet(alarmPackage.Literals.LED_ALARM__LED, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Brick returns Sensor
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (name=EString pin=EInt?)
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Alarm returns SimpleAlarm
	 *     SimpleAlarm returns SimpleAlarm
	 *
	 * Constraint:
	 *     (name=EString button=[Sensor|EString] Led=[Actuator|EString] buzzer=[Actuator|EString])
	 */
	protected void sequence_SimpleAlarm(ISerializationContext context, SimpleAlarm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.ALARM__BUTTON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.ALARM__BUTTON));
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.LED_ALARM__LED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.LED_ALARM__LED));
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.BUZZER_ALARM__BUZZER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.BUZZER_ALARM__BUZZER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleAlarmAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSimpleAlarmAccess().getButtonSensorEStringParserRuleCall_4_0_1(), semanticObject.eGet(alarmPackage.Literals.ALARM__BUTTON, false));
		feeder.accept(grammarAccess.getSimpleAlarmAccess().getLedActuatorEStringParserRuleCall_6_0_1(), semanticObject.eGet(alarmPackage.Literals.LED_ALARM__LED, false));
		feeder.accept(grammarAccess.getSimpleAlarmAccess().getBuzzerActuatorEStringParserRuleCall_8_0_1(), semanticObject.eGet(alarmPackage.Literals.BUZZER_ALARM__BUZZER, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Alarm returns StateBasedAlarm
	 *     StateBasedAlarm returns StateBasedAlarm
	 *
	 * Constraint:
	 *     (name=EString button=[Sensor|EString] Led=[Actuator|EString])
	 */
	protected void sequence_StateBasedAlarm(ISerializationContext context, StateBasedAlarm semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.ALARM__BUTTON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.ALARM__BUTTON));
			if (transientValues.isValueTransient(semanticObject, alarmPackage.Literals.LED_ALARM__LED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, alarmPackage.Literals.LED_ALARM__LED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStateBasedAlarmAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getStateBasedAlarmAccess().getButtonSensorEStringParserRuleCall_4_0_1(), semanticObject.eGet(alarmPackage.Literals.ALARM__BUTTON, false));
		feeder.accept(grammarAccess.getStateBasedAlarmAccess().getLedActuatorEStringParserRuleCall_6_0_1(), semanticObject.eGet(alarmPackage.Literals.LED_ALARM__LED, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=EString actions+=Action actions+=Action* transition=Transition)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (value=SIGNAL? sensor=[Sensor|EString] next=[State|EString])
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
