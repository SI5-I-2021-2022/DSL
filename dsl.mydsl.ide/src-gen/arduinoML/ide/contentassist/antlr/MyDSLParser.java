/*
 * generated by Xtext 2.25.0
 */
package arduinoML.ide.contentassist.antlr;

import arduinoML.ide.contentassist.antlr.internal.InternalMyDSLParser;
import arduinoML.services.MyDSLGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MyDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBrickAccess().getAlternatives(), "rule__Brick__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getSIGNALAccess().getAlternatives(), "rule__SIGNAL__Alternatives");
			builder.put(grammarAccess.getAppAccess().getGroup(), "rule__App__Group__0");
			builder.put(grammarAccess.getAppAccess().getGroup_8(), "rule__App__Group_8__0");
			builder.put(grammarAccess.getAppAccess().getGroup_13(), "rule__App__Group_13__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup_6(), "rule__State__Group_6__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_4(), "rule__Sensor__Group_4__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup(), "rule__Actuator__Group__0");
			builder.put(grammarAccess.getActuatorAccess().getGroup_4(), "rule__Actuator__Group_4__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup_2(), "rule__Action__Group_2__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_2(), "rule__Transition__Group_2__0");
			builder.put(grammarAccess.getAppAccess().getNameAssignment_1(), "rule__App__NameAssignment_1");
			builder.put(grammarAccess.getAppAccess().getInitialAssignment_4(), "rule__App__InitialAssignment_4");
			builder.put(grammarAccess.getAppAccess().getBricksAssignment_7(), "rule__App__BricksAssignment_7");
			builder.put(grammarAccess.getAppAccess().getBricksAssignment_8_1(), "rule__App__BricksAssignment_8_1");
			builder.put(grammarAccess.getAppAccess().getStatesAssignment_12(), "rule__App__StatesAssignment_12");
			builder.put(grammarAccess.getAppAccess().getStatesAssignment_13_1(), "rule__App__StatesAssignment_13_1");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
			builder.put(grammarAccess.getStateAccess().getActionsAssignment_5(), "rule__State__ActionsAssignment_5");
			builder.put(grammarAccess.getStateAccess().getActionsAssignment_6_1(), "rule__State__ActionsAssignment_6_1");
			builder.put(grammarAccess.getStateAccess().getTransitionAssignment_9(), "rule__State__TransitionAssignment_9");
			builder.put(grammarAccess.getSensorAccess().getNameAssignment_2(), "rule__Sensor__NameAssignment_2");
			builder.put(grammarAccess.getSensorAccess().getPinAssignment_4_1(), "rule__Sensor__PinAssignment_4_1");
			builder.put(grammarAccess.getActuatorAccess().getNameAssignment_2(), "rule__Actuator__NameAssignment_2");
			builder.put(grammarAccess.getActuatorAccess().getPinAssignment_4_1(), "rule__Actuator__PinAssignment_4_1");
			builder.put(grammarAccess.getActionAccess().getValueAssignment_2_1(), "rule__Action__ValueAssignment_2_1");
			builder.put(grammarAccess.getActionAccess().getActuatorAssignment_4(), "rule__Action__ActuatorAssignment_4");
			builder.put(grammarAccess.getTransitionAccess().getValueAssignment_2_1(), "rule__Transition__ValueAssignment_2_1");
			builder.put(grammarAccess.getTransitionAccess().getSensorAssignment_4(), "rule__Transition__SensorAssignment_4");
			builder.put(grammarAccess.getTransitionAccess().getNextAssignment_6(), "rule__Transition__NextAssignment_6");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDSLGrammarAccess grammarAccess;

	@Override
	protected InternalMyDSLParser createParser() {
		InternalMyDSLParser result = new InternalMyDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
