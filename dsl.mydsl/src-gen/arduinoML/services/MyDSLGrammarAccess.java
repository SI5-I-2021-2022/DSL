/*
 * generated by Xtext 2.25.0
 */
package arduinoML.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AppElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arduinoML.MyDSL.App");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInitialKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitialAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cInitialStateCrossReference_4_0 = (CrossReference)cInitialAssignment_4.eContents().get(0);
		private final RuleCall cInitialStateEStringParserRuleCall_4_0_1 = (RuleCall)cInitialStateCrossReference_4_0.eContents().get(1);
		private final Keyword cBricksKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBricksAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBricksBrickParserRuleCall_7_0 = (RuleCall)cBricksAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cBricksAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cBricksBrickParserRuleCall_8_1_0 = (RuleCall)cBricksAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cStatesKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cStatesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cStatesStateParserRuleCall_12_0 = (RuleCall)cStatesAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cStatesAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_13_1_0 = (RuleCall)cStatesAssignment_13_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//App returns App:
		//    'App'
		//    name=EString
		//    '{'
		//        'initial' initial=[State|EString]
		//        'bricks' '{' bricks+=Brick ( "," bricks+=Brick)* '}'
		//        'states' '{' states+=State ( "," states+=State)* '}'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'App'
		//name=EString
		//'{'
		//    'initial' initial=[State|EString]
		//    'bricks' '{' bricks+=Brick ( "," bricks+=Brick)* '}'
		//    'states' '{' states+=State ( "," states+=State)* '}'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'App'
		public Keyword getAppKeyword_0() { return cAppKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'initial'
		public Keyword getInitialKeyword_3() { return cInitialKeyword_3; }
		
		//initial=[State|EString]
		public Assignment getInitialAssignment_4() { return cInitialAssignment_4; }
		
		//[State|EString]
		public CrossReference getInitialStateCrossReference_4_0() { return cInitialStateCrossReference_4_0; }
		
		//EString
		public RuleCall getInitialStateEStringParserRuleCall_4_0_1() { return cInitialStateEStringParserRuleCall_4_0_1; }
		
		//'bricks'
		public Keyword getBricksKeyword_5() { return cBricksKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//bricks+=Brick
		public Assignment getBricksAssignment_7() { return cBricksAssignment_7; }
		
		//Brick
		public RuleCall getBricksBrickParserRuleCall_7_0() { return cBricksBrickParserRuleCall_7_0; }
		
		//( "," bricks+=Brick)*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//bricks+=Brick
		public Assignment getBricksAssignment_8_1() { return cBricksAssignment_8_1; }
		
		//Brick
		public RuleCall getBricksBrickParserRuleCall_8_1_0() { return cBricksBrickParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
		
		//'states'
		public Keyword getStatesKeyword_10() { return cStatesKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//states+=State
		public Assignment getStatesAssignment_12() { return cStatesAssignment_12; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_12_0() { return cStatesStateParserRuleCall_12_0; }
		
		//( "," states+=State)*
		public Group getGroup_13() { return cGroup_13; }
		
		//","
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }
		
		//states+=State
		public Assignment getStatesAssignment_13_1() { return cStatesAssignment_13_1; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_13_1_0() { return cStatesStateParserRuleCall_13_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }
	}
	public class BrickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arduinoML.MyDSL.Brick");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Brick returns Brick:
		//    Sensor | Actuator;
		@Override public ParserRule getRule() { return rule; }
		
		//Sensor | Actuator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_1() { return cActuatorParserRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arduinoML.MyDSL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arduinoML.MyDSL.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cActionsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsActionParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cActionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_6_1_0 = (RuleCall)cActionsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cTransitionKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTransitionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTransitionTransitionParserRuleCall_9_0 = (RuleCall)cTransitionAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//State returns State:
		//    'State'
		//    name=EString
		//    '{'
		//        'actions' '{' actions+=Action ( "," actions+=Action)* '}'
		//        'transition' transition=Transition
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'State'
		//name=EString
		//'{'
		//    'actions' '{' actions+=Action ( "," actions+=Action)* '}'
		//    'transition' transition=Transition
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'State'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'actions'
		public Keyword getActionsKeyword_3() { return cActionsKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//actions+=Action
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_0() { return cActionsActionParserRuleCall_5_0; }
		
		//( "," actions+=Action)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_6_1() { return cActionsAssignment_6_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_6_1_0() { return cActionsActionParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'transition'
		public Keyword getTransitionKeyword_8() { return cTransitionKeyword_8; }
		
		//transition=Transition
		public Assignment getTransitionAssignment_9() { return cTransitionAssignment_9; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_9_0() { return cTransitionTransitionParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arduinoML.MyDSL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arduinoML.MyDSL.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPinKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPinAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPinEIntParserRuleCall_4_1_0 = (RuleCall)cPinAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Sensor returns Sensor:
		//    {Sensor}
		//    'Sensor'
		//    name=EString
		//    '{'
		//        ('pin' pin=EInt)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Sensor}
		//'Sensor'
		//name=EString
		//'{'
		//    ('pin' pin=EInt)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Sensor}
		public Action getSensorAction_0() { return cSensorAction_0; }
		
		//'Sensor'
		public Keyword getSensorKeyword_1() { return cSensorKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('pin' pin=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'pin'
		public Keyword getPinKeyword_4_0() { return cPinKeyword_4_0; }
		
		//pin=EInt
		public Assignment getPinAssignment_4_1() { return cPinAssignment_4_1; }
		
		//EInt
		public RuleCall getPinEIntParserRuleCall_4_1_0() { return cPinEIntParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arduinoML.MyDSL.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActuatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActuatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPinKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPinAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPinEIntParserRuleCall_4_1_0 = (RuleCall)cPinAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Actuator returns Actuator:
		//    {Actuator}
		//    'Actuator'
		//    name=EString
		//    '{'
		//        ('pin' pin=EInt)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Actuator}
		//'Actuator'
		//name=EString
		//'{'
		//    ('pin' pin=EInt)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Actuator}
		public Action getActuatorAction_0() { return cActuatorAction_0; }
		
		//'Actuator'
		public Keyword getActuatorKeyword_1() { return cActuatorKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('pin' pin=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'pin'
		public Keyword getPinKeyword_4_0() { return cPinKeyword_4_0; }
		
		//pin=EInt
		public Assignment getPinAssignment_4_1() { return cPinAssignment_4_1; }
		
		//EInt
		public RuleCall getPinEIntParserRuleCall_4_1_0() { return cPinEIntParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arduinoML.MyDSL.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cValueKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSIGNALEnumRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cActuatorKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActuatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cActuatorActuatorCrossReference_4_0 = (CrossReference)cActuatorAssignment_4.eContents().get(0);
		private final RuleCall cActuatorActuatorEStringParserRuleCall_4_0_1 = (RuleCall)cActuatorActuatorCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Action returns Action:
		//    'Action'
		//    '{'
		//        ('value' value=SIGNAL)?
		//        'actuator' actuator=[Actuator|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Action'
		//'{'
		//    ('value' value=SIGNAL)?
		//    'actuator' actuator=[Actuator|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('value' value=SIGNAL)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'value'
		public Keyword getValueKeyword_2_0() { return cValueKeyword_2_0; }
		
		//value=SIGNAL
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//SIGNAL
		public RuleCall getValueSIGNALEnumRuleCall_2_1_0() { return cValueSIGNALEnumRuleCall_2_1_0; }
		
		//'actuator'
		public Keyword getActuatorKeyword_3() { return cActuatorKeyword_3; }
		
		//actuator=[Actuator|EString]
		public Assignment getActuatorAssignment_4() { return cActuatorAssignment_4; }
		
		//[Actuator|EString]
		public CrossReference getActuatorActuatorCrossReference_4_0() { return cActuatorActuatorCrossReference_4_0; }
		
		//EString
		public RuleCall getActuatorActuatorEStringParserRuleCall_4_0_1() { return cActuatorActuatorEStringParserRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arduinoML.MyDSL.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cValueKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSIGNALEnumRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cSensorKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSensorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSensorSensorCrossReference_4_0 = (CrossReference)cSensorAssignment_4.eContents().get(0);
		private final RuleCall cSensorSensorEStringParserRuleCall_4_0_1 = (RuleCall)cSensorSensorCrossReference_4_0.eContents().get(1);
		private final Keyword cNextKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNextAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cNextStateCrossReference_6_0 = (CrossReference)cNextAssignment_6.eContents().get(0);
		private final RuleCall cNextStateEStringParserRuleCall_6_0_1 = (RuleCall)cNextStateCrossReference_6_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Transition returns Transition:
		//    'Transition'
		//    '{'
		//        ('value' value=SIGNAL)?
		//        'sensor' sensor=[Sensor|EString]
		//        'next' next=[State|EString]
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Transition'
		//'{'
		//    ('value' value=SIGNAL)?
		//    'sensor' sensor=[Sensor|EString]
		//    'next' next=[State|EString]
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('value' value=SIGNAL)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'value'
		public Keyword getValueKeyword_2_0() { return cValueKeyword_2_0; }
		
		//value=SIGNAL
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//SIGNAL
		public RuleCall getValueSIGNALEnumRuleCall_2_1_0() { return cValueSIGNALEnumRuleCall_2_1_0; }
		
		//'sensor'
		public Keyword getSensorKeyword_3() { return cSensorKeyword_3; }
		
		//sensor=[Sensor|EString]
		public Assignment getSensorAssignment_4() { return cSensorAssignment_4; }
		
		//[Sensor|EString]
		public CrossReference getSensorSensorCrossReference_4_0() { return cSensorSensorCrossReference_4_0; }
		
		//EString
		public RuleCall getSensorSensorEStringParserRuleCall_4_0_1() { return cSensorSensorEStringParserRuleCall_4_0_1; }
		
		//'next'
		public Keyword getNextKeyword_5() { return cNextKeyword_5; }
		
		//next=[State|EString]
		public Assignment getNextAssignment_6() { return cNextAssignment_6; }
		
		//[State|EString]
		public CrossReference getNextStateCrossReference_6_0() { return cNextStateCrossReference_6_0; }
		
		//EString
		public RuleCall getNextStateEStringParserRuleCall_6_0_1() { return cNextStateEStringParserRuleCall_6_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	
	public class SIGNALElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "arduinoML.MyDSL.SIGNAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHIGHHIGHKeyword_0_0 = (Keyword)cHIGHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOWLOWKeyword_1_0 = (Keyword)cLOWEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SIGNAL returns SIGNAL:
		//                HIGH = 'HIGH' | LOW = 'LOW';
		public EnumRule getRule() { return rule; }
		
		//HIGH = 'HIGH' | LOW = 'LOW'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HIGH = 'HIGH'
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_0() { return cHIGHEnumLiteralDeclaration_0; }
		
		//'HIGH'
		public Keyword getHIGHHIGHKeyword_0_0() { return cHIGHHIGHKeyword_0_0; }
		
		//LOW = 'LOW'
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_1() { return cLOWEnumLiteralDeclaration_1; }
		
		//'LOW'
		public Keyword getLOWLOWKeyword_1_0() { return cLOWLOWKeyword_1_0; }
	}
	
	private final AppElements pApp;
	private final BrickElements pBrick;
	private final EStringElements pEString;
	private final StateElements pState;
	private final EIntElements pEInt;
	private final SensorElements pSensor;
	private final ActuatorElements pActuator;
	private final ActionElements pAction;
	private final TransitionElements pTransition;
	private final SIGNALElements eSIGNAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pApp = new AppElements();
		this.pBrick = new BrickElements();
		this.pEString = new EStringElements();
		this.pState = new StateElements();
		this.pEInt = new EIntElements();
		this.pSensor = new SensorElements();
		this.pActuator = new ActuatorElements();
		this.pAction = new ActionElements();
		this.pTransition = new TransitionElements();
		this.eSIGNAL = new SIGNALElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("arduinoML.MyDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//App returns App:
	//    'App'
	//    name=EString
	//    '{'
	//        'initial' initial=[State|EString]
	//        'bricks' '{' bricks+=Brick ( "," bricks+=Brick)* '}'
	//        'states' '{' states+=State ( "," states+=State)* '}'
	//    '}';
	public AppElements getAppAccess() {
		return pApp;
	}
	
	public ParserRule getAppRule() {
		return getAppAccess().getRule();
	}
	
	//Brick returns Brick:
	//    Sensor | Actuator;
	public BrickElements getBrickAccess() {
		return pBrick;
	}
	
	public ParserRule getBrickRule() {
		return getBrickAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//State returns State:
	//    'State'
	//    name=EString
	//    '{'
	//        'actions' '{' actions+=Action ( "," actions+=Action)* '}'
	//        'transition' transition=Transition
	//    '}';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Sensor returns Sensor:
	//    {Sensor}
	//    'Sensor'
	//    name=EString
	//    '{'
	//        ('pin' pin=EInt)?
	//    '}';
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Actuator returns Actuator:
	//    {Actuator}
	//    'Actuator'
	//    name=EString
	//    '{'
	//        ('pin' pin=EInt)?
	//    '}';
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//Action returns Action:
	//    'Action'
	//    '{'
	//        ('value' value=SIGNAL)?
	//        'actuator' actuator=[Actuator|EString]
	//    '}';
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Transition returns Transition:
	//    'Transition'
	//    '{'
	//        ('value' value=SIGNAL)?
	//        'sensor' sensor=[Sensor|EString]
	//        'next' next=[State|EString]
	//    '}';
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//enum SIGNAL returns SIGNAL:
	//                HIGH = 'HIGH' | LOW = 'LOW';
	public SIGNALElements getSIGNALAccess() {
		return eSIGNAL;
	}
	
	public EnumRule getSIGNALRule() {
		return getSIGNALAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
