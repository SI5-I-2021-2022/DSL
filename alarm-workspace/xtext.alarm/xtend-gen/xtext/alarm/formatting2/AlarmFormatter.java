/**
 * generated by Xtext 2.25.0
 */
package xtext.alarm.formatting2;

import alarm.Action;
import alarm.Alarm;
import alarm.App;
import alarm.Brick;
import alarm.State;
import alarm.Transition;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import xtext.alarm.services.AlarmGrammarAccess;

@SuppressWarnings("all")
public class AlarmFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private AlarmGrammarAccess _alarmGrammarAccess;
  
  protected void _format(final App app, @Extension final IFormattableDocument document) {
    EList<Brick> _bricks = app.getBricks();
    for (final Brick brick : _bricks) {
      document.<Brick>format(brick);
    }
    EList<State> _states = app.getStates();
    for (final State state : _states) {
      document.<State>format(state);
    }
    EList<Alarm> _alarm = app.getAlarm();
    for (final Alarm alarm : _alarm) {
      document.<Alarm>format(alarm);
    }
  }
  
  protected void _format(final State state, @Extension final IFormattableDocument document) {
    EList<Action> _actions = state.getActions();
    for (final Action action : _actions) {
      document.<Action>format(action);
    }
    document.<Transition>format(state.getTransition());
  }
  
  public void format(final Object app, final IFormattableDocument document) {
    if (app instanceof XtextResource) {
      _format((XtextResource)app, document);
      return;
    } else if (app instanceof App) {
      _format((App)app, document);
      return;
    } else if (app instanceof State) {
      _format((State)app, document);
      return;
    } else if (app instanceof EObject) {
      _format((EObject)app, document);
      return;
    } else if (app == null) {
      _format((Void)null, document);
      return;
    } else if (app != null) {
      _format(app, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(app, document).toString());
    }
  }
}
